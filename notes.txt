docker-compose run --rm app sh -c "python manage.py collectstatic"
docker-compose : runs a docker compose command
run : will start a specific container defined in config
--rm : removes the container
app : is the name of the service
sh -c : passes in a shell command

docker build .
docker-compose build .

docker-compose run --rm app sh-c "flake8"
docker-compose run --rm app sh-c "python manage.py test"

docker-compose build

docker-compose run --rm app sh -c "flake8"  # or "python -m flake8"

docker-compose run --rm app sh -c "django-admin startproject app ."

docker-compose up


# GitHub Actions
    Automation tool
    similar to Travis-CI , Gitlab CI/CD , Jenkins
    Run Jobs when Code changes

    Common uses:
        Deployment   Devops Deployment Automation with Terraform, AWS and Docker
        Code linting
        Unit tests

    Trigger ?
        Code Pushed to Github - > Run unit Tests -> Result

    git add .
    git commit -am "Added Github Actions"
    git push origin

## Django Test framework
 based on unittest
    Test client - dummy web browser
    Simulate authentication
    Temporary Database

Django REST Framework
    API test client
    tests.py or tests/test_ with __init__.py
    
Test databases  
     Test -> clears Data every time , can override this behaviour

Test classes
    SimpleTestCase - No DB
    TestCase - With DB

## Mocking 
    Override or change behaviour of dependencies
    Avoid unintended side effects
    Isolate code being tested
    Avoid relying on external services
    Avoid accidentally sending emails

    Example 
        register_user() - > user_in_db() ->send_welcome_email()

    speed up test
        check_db() ->sleep() loop back

    unittest.mock
    MagicMok/Mock
    patch

    